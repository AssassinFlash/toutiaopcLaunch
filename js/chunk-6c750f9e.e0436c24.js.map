{"version":3,"sources":["webpack:///./src/views/login/index.vue?2167","webpack:///./src/views/login/index.vue","webpack:///./src/components/Login/useLoginValidate.js","webpack:///./src/components/Login/Loading.vue","webpack:///./src/components/Login/Loading.vue?159a","webpack:///./src/views/login/index.vue?f90f","webpack:///./src/api/user.js","webpack:///./src/views/login/logo_index.png"],"names":["class","src","alt","isLoadingShow","model","user","rules","formRules","ref","name","value","mobile","placeholder","code","checked","isAgree","type","onLogin","loading","validateCheck","rule","Promise","reject","resolve","required","message","trigger","pattern","validator","background","speed","style","loop","autoplay","render","components","Loading","setup","props","context","$router","loginForm","useLoginValidate","loginMethod","then","window","localStorage","setItem","data","token","push","success","catch","error","validate","console","log","__scopeId","login","requestNet","method","url","getUserProfile","userToken","updateUserphoto","updateUser","module","exports"],"mappings":"yIAAA,W,yHCMOA,MAAM,mB,EAYP,eAAmC,OAA9BC,IAAA,IAAuBC,IAAI,I,WAoB5B,eAA6B,YAAvB,oBAAgB,G,iBASvB,Q,+PA1CwB,EAAAC,e,iBAA/B,eAAwD,G,MAA/CH,MAAM,a,sBACf,eA8CM,MA9CN,EA8CM,CAnCJ,eAkCS,GAlCAI,MAAO,EAAAC,KAAML,MAAM,aAAcM,MAAO,EAAAC,UAAWC,IAAI,a,yBAC9D,iBAAmC,CAAnC,EACA,eAMc,GANDR,MAAM,kBAAkBS,KAAK,U,yBACxC,iBAIE,CAJF,eAIE,GAHQC,MAAO,EAAAL,KAAKM,O,gDAAL,EAAAN,KAAKM,OAAM,IAC1BC,YAAY,SACZZ,MAAM,oB,4BAGV,eAMc,GANDA,MAAM,kBAAkBS,KAAK,Q,yBACxC,iBAIE,CAJF,eAIE,GAHQC,MAAO,EAAAL,KAAKQ,K,gDAAL,EAAAR,KAAKQ,KAAI,IACxBD,YAAY,SACZZ,MAAM,oB,4BAGV,eAOc,GAPDS,KAAK,WAAS,C,wBACzB,iBAKa,CALb,eAKa,GAJHK,QAAS,EAAAT,KAAKU,Q,kDAAL,EAAAV,KAAKU,QAAO,IAC7Bf,MAAM,uB,yBAEN,iBAA6B,CAA7B,M,8BAGJ,eASc,GATDA,MAAM,mBAAiB,C,wBAClC,iBAOW,CAPX,eAOW,GANTgB,KAAK,UACJ,QAAO,EAAAC,QACRjB,MAAM,YACLkB,QAAS,EAAAf,e,yBACX,iBAED,C,kKChDO,G,oBAAA,WAEb,IAAMgB,EAAa,yDAAG,WAAgBC,EAAMV,GAAtB,oFAEfA,EAFe,yCAIXW,QAAQC,OAAO,UAJJ,gCAMXD,QAAQE,WANG,2CAAH,wDAWnB,MAAO,CAELZ,OAAQ,CACN,CACEa,UAAU,EACVC,QAAS,UACTC,QAAS,QAEX,CACEC,QAAS,YACTF,QAAS,aACTC,QAAS,WAGbb,KAAM,CACJ,CACEW,UAAU,EACVC,QAAS,UACTC,QAAS,QAEX,CACEC,QAAS,UACTF,QAAS,UACTC,QAAS,WAGbX,QAAS,CAGP,CAEEa,UAAWT,EACXO,QAAS,c,sFC7Cf,eAMgB,GALdzB,IAAI,sEACJ4B,WAAW,cACXC,MAAM,IACNC,MAAA,+BACAC,KAAA,GAAKC,SAAA,KAKM,OACbxB,KAAM,WCTR,EAAOyB,OAAS,EAED,QH0DA,GACbzB,KAAM,aACN0B,WAAY,CACVC,WAEFC,MAAO,SAAUC,EAAOC,GAEtB,IAAMC,EAAU,iBAEVrC,EAAgB,gBAAI,GAEpBE,EAAO,eAAS,CACpBM,OAAQ,cACRE,KAAM,SACNE,SAAS,IAGL0B,EAAY,iBAGZlC,EAAYmC,IAGZC,EAAc,WAElBxC,EAAcO,OAAQ,EAEtB,eAAML,GAAMuC,MAAK,SAAAlC,GAEfP,EAAcO,OAAQ,EAEtBmC,OAAOC,aAAaC,QAAQ,OAAQrC,EAAMsC,KAAKA,KAAKC,OAEpDT,EAAQU,KAAK,CAAEzC,KAAM,SACrBgB,EAAA,KAAQ0B,QAAR,aAAsBzC,EAAMsC,KAAKA,KAAKvC,KAAtC,aACC2C,OAAM,WACPjD,EAAcO,OAAQ,EACtBe,EAAA,KAAQ4B,MAAM,sBAIZpC,EAAU,WAEdwB,EAAU/B,MAAM4C,WAAWV,MAAK,WAE9BD,OACCS,OAAM,WACPG,QAAQC,IAAI,cAIhB,MAAO,CACLrD,gBACAE,OACAE,YACAkC,YACAxB,a,UIlHN,EAAOiB,OAASA,EAChB,EAAOuB,UAAY,kBAEJ,gB,kCCRf,wJAYaC,EAAQ,SAACrD,GACpB,OAAOsD,eAAW,CAChBC,OAAQ,OACRC,IAAK,0BACLb,KAAM3C,KAKGyD,EAAiB,SAACC,GAC7B,OAAOJ,eAAW,CAChBC,OAAQ,MACRC,IAAK,2BAKIG,EAAkB,SAAChB,GAC9B,OAAOW,eAAW,CAChBC,OAAQ,QACRC,IAAK,sBACLb,UAKSiB,EAAa,SAAAjB,GACxB,OAAOW,eAAW,CAChBC,OAAQ,QACRC,IAAK,wBACLb,W,qBC1CJkB,EAAOC,QAAU,IAA0B","file":"js/chunk-6c750f9e.e0436c24.js","sourcesContent":["export * from \"-!../../../node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./index.vue?vue&type=style&index=0&id=a808baae&lang=less&scoped=true\"","<template>\n  <!--\n    a-form表单\n    表单项用a-form-item包裹\n  -->\n  <Loading class=\"loading\" v-if=\"isLoadingShow\"></Loading>\n  <div class=\"login-container\">\n    <!--\n      配置Form表单验证使其自动验证：\n      1.给a-form组件绑定model属性，为表单数据对象(这里为user)\n      2.给需要验证的表单项a-form-item指定name属性，为表单数据对象的属性名(字符串)\n      3.给a-form组件绑定rules属性，为验证规则\n\n      手动触发表单验证：\n      1.给a-form指定ref属性，取名要与变量名一致\n      2.通过ref获取a-form组件，调用组价的validate方法\n    -->\n    <a-form :model=\"user\" class=\"login-form\" :rules=\"formRules\" ref=\"loginForm\">\n      <img src=\"./logo_index.png\" alt=\"\">\n      <a-form-item class=\"login-form-item\" name=\"mobile\">\n        <a-input\n          v-model:value=\"user.mobile\"\n          placeholder=\"请输入手机号\"\n          class=\"login-form-input\"\n        />\n      </a-form-item>\n      <a-form-item class=\"login-form-item\" name=\"code\">\n        <a-input\n          v-model:value=\"user.code\"\n          placeholder=\"请输入验证码\"\n          class=\"login-form-input\"\n        />\n      </a-form-item>\n      <a-form-item name=\"isAgree\">\n        <a-checkbox\n          v-model:checked=\"user.isAgree\"\n          class=\"login-form-checkbox\"\n        >\n          <span>我已阅读并同意用户协议和隐私条款</span>\n        </a-checkbox>\n      </a-form-item>\n      <a-form-item class=\"login-form-item\">\n        <a-button\n          type=\"primary\"\n          @click=\"onLogin\"\n          class=\"login-btn\"\n          :loading=\"isLoadingShow\"\n        >\n          登录\n        </a-button>\n      </a-form-item>\n    </a-form>\n  </div>\n</template>\n\n<script>\nimport { message } from 'ant-design-vue'\nimport { ref, reactive } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { login } from '@/api/user'\nimport useLoginValidate from '@/components/Login/useLoginValidate'\nimport Loading from '@/components/Login/Loading'\n\nexport default {\n  name: 'LoginIndex',\n  components: {\n    Loading\n  },\n  setup: function (props, context) {\n    // 获取路由对象\n    const $router = useRouter()\n    // 防止网络请求慢出现用户多次点击触发登录请，交互反馈更好\n    const isLoadingShow = ref(false) // 登录的loading状态\n    // 获取表单数据\n    const user = reactive({\n      mobile: '13911111111', // 手机号\n      code: '246810', // 验证码\n      isAgree: true // 是否同意协议\n    })\n    // 获取form表单元素(变量与ref名字同名即可)\n    const loginForm = ref()\n\n    // 从表单验证生成函数中获取表单验证规则\n    const formRules = useLoginValidate()\n\n    // 方法\n    const loginMethod = function () {\n      // loading组件显示\n      isLoadingShow.value = true\n      // 使用api接口的登录方法\n      login(user).then(value => {\n        // 验证通过，提交登录\n        isLoadingShow.value = false\n        // 拿到接口返回的用户令牌token并将token存储到localStorage，方便数据共享\n        window.localStorage.setItem('user', value.data.data.token)\n        // 进入首页\n        $router.push({ name: 'Home' })\n        message.success(`用户：${value.data.data.name} 登入后台`)\n      }).catch(() => {\n        isLoadingShow.value = false\n        message.error('登录失败，手机号或验证码错误')\n      })\n    }\n\n    const onLogin = function () {\n      // 通过ref属性获得指定的表单组件，手动触发表单验证，validate返回promise对象\n      loginForm.value.validate().then(() => {\n        // 表单验证通过了则调用loginMethod方法\n        loginMethod()\n      }).catch(() => {\n        console.log('表单验证失败')\n      })\n    }\n\n    return {\n      isLoadingShow,\n      user,\n      formRules,\n      loginForm,\n      onLogin\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.login-container {\n  //定位到全部大小\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  background: url(\"../login/login_bg.jpg\") no-repeat;\n  background-size: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .login-form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-width: 400px;\n    background: rgba(255, 255, 255, .4);\n    padding: 30px 50px 50px;\n\n    .login-form-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      margin: 10px 0 5px;\n      padding: 0;\n      height: 65px;\n\n      .login-form-input {\n        flex: 1;\n        padding: 10px;\n        font-size: 15px;\n        line-height: 1.5;\n      }\n\n      .ant-checkbox-wrapper {\n        font-size: 16px;\n      }\n\n      .ant-form-item-control {\n        justify-content: center;\n      }\n\n      .login-btn {\n        width: 100%;\n        height: 50px;\n        padding: 10px 0;\n        font-size: 20px;\n      }\n\n    }\n\n    img {\n      width: 200px;\n      margin: 0 auto 20px;\n    }\n  }\n}\n\n.loading {\n  position: fixed;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  z-index: 3;\n  background: rgba(0, 0, 0, 0.5);\n}\n</style>\n","// 把表单验证另外写到一个文件上，减少组件代码量\nexport default function () {\n  // 自定义校验规则，返回promise对象，这是因为触发校验方法使用的是promise\n  const validateCheck = async function (rule, value) {\n    // rule默认传，value就是表单元素的value，对于checkbox，选中了value就为true\n    if (!value) {\n      // eslint-disable-next-line prefer-promise-reject-errors\n      return Promise.reject('未勾选协议')// 内容就是规则的message\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  // 表单验证规则配置\n  return {\n    // 要验证的数据名(与表单项指定的name属性名一致)：规则列表[]\n    mobile: [\n      {\n        required: true, // 必填，不能为空\n        message: '手机号不能为空', // 提示消息\n        trigger: 'blur'// 触发条件:当失去焦点时触发\n      },\n      {\n        pattern: /^1\\d{10}$/, // 正则表达式\n        message: '请输入正确的号码格式',\n        trigger: 'change'// 当内容修改时触发\n      }\n    ],\n    code: [\n      {\n        required: true,\n        message: '验证码不能为空',\n        trigger: 'blur'\n      },\n      {\n        pattern: /^\\d{6}$/,\n        message: '长度为6个数字',\n        trigger: 'change'\n      }\n    ],\n    isAgree: [\n      // 对于checkbox，一般要自定义验证规则，使用自定义验证规则要在对象内配置validator属性\n      // 不需要写message，因为自定义校验函数里配置了message\n      {\n        // 校验器使用前面定义的校验函数\n        validator: validateCheck,\n        trigger: 'change'\n      }\n    ]\n  }\n}\n","<template>\n  <lottie-player\n    src=\"https://assets5.lottiefiles.com/datafiles/ORpUnaV6z0mJ17E/data.json\"\n    background=\"transparent\"\n    speed=\"1\"\n    style=\"width: 100vw; height: 100vh;\"\n    loop autoplay>\n  </lottie-player>\n</template>\n\n<script>\nexport default {\n  name: 'Loading'\n}\n</script>\n\n<style scoped>\n\n</style>\n","import { render } from \"./Loading.vue?vue&type=template&id=1321dc39\"\nimport script from \"./Loading.vue?vue&type=script&lang=js\"\nexport * from \"./Loading.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import { render } from \"./index.vue?vue&type=template&id=a808baae&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=a808baae&lang=less&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-a808baae\"\n\nexport default script","import { requestNet } from '@/utils/request'\n/*\n* 用户相关请求模块\n* */\n// 为什么要有这些模块？\n// 1.接口可能需要重用\n// 2.url、变量等参数容易变动，不作封装就难以查找和修改\n// 这样做的好处是？\n// 封装起来方便重用，管理和维护更加方便\n\n// 用户登录\n// 接口要求：把用户信息作为data传入\nexport const login = (user) => {\n  return requestNet({\n    method: 'POST',\n    url: '/mp/v1_0/authorizations',\n    data: user\n  })\n}\n// 获取用户资料\n// 接口要求：把用户身份令牌token放到请求头中(在请求拦截器中实现)\nexport const getUserProfile = (userToken) => {\n  return requestNet({\n    method: 'GET',\n    url: '/mp/v1_0/user/profile'\n  })\n}\n\n// 修改用户头像\nexport const updateUserphoto = (data) => {\n  return requestNet({\n    method: 'PATCH',\n    url: '/mp/v1_0/user/photo',\n    data\n  })\n}\n\n// 修改用户基本信息\nexport const updateUser = data => {\n  return requestNet({\n    method: 'PATCH',\n    url: '/mp/v1_0/user/profile',\n    data\n  })\n}\n","module.exports = __webpack_public_path__ + \"img/logo_index.e0892259.png\";"],"sourceRoot":""}